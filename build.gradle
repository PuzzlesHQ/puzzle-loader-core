import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import dev.puzzleshq.buildsrc.DepUtils

import org.hjson.JsonArray
import org.hjson.JsonObject
import org.hjson.Stringify

plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.sgtsilvio.gradle.maven-central-publishing") version "0.4.0"
    id 'com.gradleup.shadow' version '8.3.6'
}

def ref = System.getenv("GITHUB_REF")
version = ((ref == null) ? "refs/tags/0.0.0-alpha" : ref).replaceAll("refs/tags/", "")

String mavenUrl = System.getenv("MAVEN_URL")

String envRepo = System.getenv("MAVEN_REPO")
String mavenRepo = envRepo != null ? envRepo : "releases"

repositories {
    maven {
        name = 'Jitpack'
        url "https://jitpack.io" 
    }
    maven {
        name = 'MixinSquared'
        url "https://maven.bawnorton.com/releases" 
    }
    mavenCentral()
}

java {
    sourceCompatibility = '8'
    targetCompatibility = '8'
}

jar.enabled = false

sourceSets {
    common
    client
    server
}

configurations {

    allCompileOnly
    clientCompilyOnly.extendsFrom(allCompileOnly)
    commonCompilyOnly.extendsFrom(allCompileOnly)

    clientBundle
    clientImplementation.extendsFrom(clientBundle)

    clientInternal
    clientImplementation.extendsFrom(clientInternal)

    serverInternal
    serverImplementation.extendsFrom(serverInternal)

    commonBundle
    commonImplementation.extendsFrom(commonBundle)
    clientImplementation.extendsFrom(commonBundle)
    serverImplementation.extendsFrom(commonBundle)

    serverBundle
    commonImplementation.extendsFrom(serverBundle)
    serverImplementation.extendsFrom(serverBundle)

    clientNative
    clientImplementation.extendsFrom(clientNative)

    clientImpl
    clientImplementation.extendsFrom(clientImpl)

    serverImpl
    serverImplementation.extendsFrom(serverImpl)
}

def natives(String lwjgl_natives) {
    dependencies {
        clientNative "org.lwjgl:lwjgl:$lwjgl_version:$lwjgl_natives"
        clientNative "org.lwjgl:lwjgl-opengl:$lwjgl_version:$lwjgl_natives"
        clientNative "org.lwjgl:lwjgl-glfw:$lwjgl_version:$lwjgl_natives"
    }
}

final HashMap<String, String>[] excludes = new HashMap<String, String>[]{
        ["group": "org.slf4j", "module": "slf4j-api"] as HashMap,
        ["group": "com.google.code.gson", "module": "gson"] as HashMap,
        ["group": "org.apache.logging.log4j", "module": "log4j-core"] as HashMap,
        ["group": "org.apache.logging.log4j", "module": "log4j-api"] as HashMap,
        ["group": "org.javassist", "module": "javassist"] as HashMap,
        ["group": "com.google.errorprone", "module": "error_prone_annotations"] as HashMap,
        ["group": "com.google.guava", "module": "guava"] as HashMap,
        ["group": "com.google.guava", "module": "failureaccess"] as HashMap,
        ["group": "com.google.guava", "module": "listenablefuture"] as HashMap,
        ["group": "com.google.j2objc", "module": "j2objc-annotations"] as HashMap,
        ["group": "org.jspecify", "module": "jspecify"] as HashMap,
        ["group": "org.apache.commons", "module": "commons-compress"] as HashMap,
        ["group": "org.apache.commons", "module": "commons-lang3"] as HashMap,
        ["group": "commons-io", "module": "commons-io"] as HashMap,
        ["group": "commons-codec", "module": "commons-codec"] as HashMap,
        ["group": "com.google.code.findbugs", "module": "jsr305"] as HashMap,
        ["group": "org.ow2.asm", "module": "asm"] as HashMap,
        ["group": "org.ow2.asm", "module": "asm-tree"] as HashMap,
        ["group": "org.ow2.asm", "module": "asm-commons"] as HashMap,
        ["group": "org.ow2.asm", "module": "asm-analysis"] as HashMap,
        ["group": "org.ow2.asm", "module": "asm-util"] as HashMap,
}

// Common Dependencies
dependencies {
    clientCompileOnly "org.jetbrains:annotations:$jetbrains_annotations_version"
    commonCompileOnly "org.jetbrains:annotations:$jetbrains_annotations_version"
    serverCompileOnly "org.jetbrains:annotations:$jetbrains_annotations_version"

    clientImpl "org.lwjgl:lwjgl:$lwjgl_version"
    clientImpl "org.lwjgl:lwjgl-opengl:$lwjgl_version"
    clientImpl "org.lwjgl:lwjgl-glfw:$lwjgl_version"

    natives("natives-linux")
    natives("natives-linux-arm32")
    natives("natives-linux-arm64")
    natives("natives-macos")
    natives("natives-macos-arm64")
    natives("natives-windows")
    natives("natives-windows-arm64")
    natives("natives-windows-x86")

    clientInternal sourceSets.common.output
    serverInternal sourceSets.common.output

    // Common
    commonBundle ("io.sigpipe:jbsdiff:$jbsdiff_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle("net.fabricmc:sponge-mixin:$mixin_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle annotationProcessor("io.github.llamalad7:mixinextras-common:$mixin_extras_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:$mixin_squared_version")) { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle("com.github.PuzzlesHQ:mixinconstraints-java8:$mixin_constraints_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("net.sf.jopt-simple:jopt-simple:$jopt_simple_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.guava:guava:$google_guava_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.code.gson:gson:$gson_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.javassist:javassist:$javassist_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("com.github.villadora:semver:$semver_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("org.apache.logging.log4j:log4j-api:$log4j_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.apache.logging.log4j:log4j-core:$log4j_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.reflections:reflections:$reflections_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("org.ow2.asm:asm:$asm_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.ow2.asm:asm-tree:$asm_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.ow2.asm:asm-util:$asm_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.ow2.asm:asm-analysis:$asm_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.ow2.asm:asm-commons:$asm_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("dev.puzzleshq:puzzle-annotations:$puzzle_annotations_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("dev.puzzleshq:access-writer:$puzzle_access_writer_version" ) { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("dev.puzzleshq:mod-format-framework:$puzzle_mod_format_framework_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("org.jspecify:jspecify:$jspecify_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.errorprone:error_prone_annotations:$google_error_prone_annotations_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.guava:failureaccess:$google_failureaccess_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.guava:listenablefuture:$google_listenablefuture_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.j2objc:j2objc-annotations:$google_j2objc_annotations_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("com.google.code.findbugs:jsr305:$google_findbugs_jsr305_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("org.apache.commons:commons-compress:$apache_commons_compress_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("org.apache.commons:commons-lang3:$apache_commons_lang3_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("commons-codec:commons-codec:$apache_commons_codec_version") { for (HashMap<String, String> map : excludes) exclude map }
    commonBundle ("commons-io:commons-io:$apache_commons_io_version") { for (HashMap<String, String> map : excludes) exclude map }

    commonBundle ("org.hjson:hjson:$hjson_version") {for (HashMap<String, String> map : excludes) exclude map }
}

tasks.register("buildMergedTestJar", ShadowJar) {
    ArrayList t = new ArrayList();
    Collections.addAll(t, project.configurations.clientInternal, project.configurations.commonBundle, project.configurations.clientBundle)
    configurations = t

    mergeServiceFiles()
    relocate("org.objectweb", "internal.org.objectweb")
    relocate("org.spongepowered.include", "internal")
    relocate("com.google.common.eventbus", "unused")

    archiveClassifier = "merged-test"
    from sourceSets.client.output
}

tasks.register("buildServerJar", ShadowJar) {
    mergeServiceFiles()

    manifest {
        attributes(
                'Main-Class': "dev.puzzleshq.puzzleloader.loader.launch.pieces.ServerPiece",
                'Add-Opens': "java.base/java.lang",
                'Class-Path': "lib"
        )
    }

    archiveClassifier = "server"
    from sourceSets.server.output
}

tasks.register("buildCommonJar", ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "common"
    from sourceSets.common.output
}

tasks.register("buildClientJar", ShadowJar) {
    mergeServiceFiles()

    manifest {
        attributes(
                'Main-Class': "dev.puzzleshq.puzzleloader.loader.launch.pieces.ClientPiece",
                'Add-Opens': "java.base/java.lang",
                'Class-Path': "lib"
        )
    }

    archiveClassifier = "client"
    from sourceSets.client.output
}

tasks.register("buildSourcesJar", Jar) {
    from sourceSets.client.allSource
    from sourceSets.common.allSource
    from sourceSets.server.allSource
    archiveClassifier = "sources"
}

static def add(String side, JsonObject o, Configuration configuration, String type) {
    JsonArray array
    if (o.get(side) == null) array = new JsonArray()
    else array = o.get(side).asArray()

    for (final def dep in configuration.allDependencies) {
        JsonObject object = new JsonObject();

        def classifier = DepUtils.getClassifier(dep);
        if (classifier != null) object.add("classifier", classifier);
        object.add("groupId", dep.group);
        object.add("artifactId", dep.name);
        object.add("version", dep.version);
        object.add("type", type);
        array.add(object)
    }
    o.add(side, array)
}

tasks.register("mkDeps") {
    File file = new File("$projectDir/dependencies.json")

    JsonObject object = new JsonObject();
    add("client", object, configurations.clientImpl, "implementation")
    add("server", object, configurations.serverImpl, "implementation")
    add("common", object, configurations.commonBundle, "implementation")

    JsonArray repos = new JsonArray()
    for (i in 0..<project.repositories.size()) {
        def dependency = project.repositories[i];
        if (dependency instanceof MavenArtifactRepository) {
            if (dependency.name == "MavenLocal") continue
            JsonObject repo = new JsonObject()
            repo.add("name", dependency.name)
            repo.add("url", dependency.url.toString())
            repos.add(repo)
        }
    }
    object.add("repos", repos)

    file.write(object.toString(Stringify.FORMATTED))
}

processCommonResources {
    Map<String, Object> replacement_properties = [
            "p_name": p_name,
            "p_version": ((String)version).contains(".") ? version : "69.69.69",
            "p_desc": p_desc,

            "p_id": p_id,
            "p_group": p_group,

            "p_git": p_git,
            "mixinVersion": mixin_version,
            "shortMixinsVersion": mixin_version.replaceAll("\\+.*", "")
    ]

    inputs.properties replacement_properties

    filesMatching(["assets/puzzle-loader-core/core-version.txt", "assets/puzzle-loader-core/mixin-version.txt", "puzzle.mod.json"]) {
        expand replacement_properties
    }
}

publishing {
    repositories {
        maven {
            name = "PuzzleHQsMaven"
            url = mavenUrl+ "/" +mavenRepo
            credentials {
                username = System.getenv("MAVEN_NAME")
                password = System.getenv("MAVEN_SECRET")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
        mavenLocal()
    }

    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id

            artifact source: buildClientJar, classifier: 'client', extension: 'jar'
            artifact source: buildCommonJar, classifier: 'common', extension: 'jar'
            artifact source: buildServerJar, classifier: 'server', extension: 'jar'
            artifact source: buildSourcesJar, classifier: 'sources', extension: 'jar'

            pom {
                name = p_name
                description = p_desc
                url = p_git

                dependencies {
                }

                licenses {
                    license {
                        name = "GNU Lesser General Public License"
                        url = "https://www.gnu.org/licenses/lgpl-3.0.html"
                        distribution = "LGPL"
                        comments = "This project includes LGPL-licensed components."
                    }
                }

                developers {
                    developer {
                        id = 'mrzombii'
                        name = 'Mr Zombii'
                        email = 'thezombiigames@gmail.com'
                    }
                }
                scm {
                    connection = "${p_git}.git"
                    developerConnection = "${p_git}.git"
                    url = "${p_git}.git"
                }
            }
        }
    }
}

if (ref != null) {
    signing {
        useGpgCmd()
        sign(publishing.publications[0])
    }
}

wrapper {
    gradleVersion = "8.14"
    distributionType = Wrapper.DistributionType.ALL
}
