import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import dev.puzzleshq.accesswriter.AccessWriters
import dev.puzzleshq.buildsrc.DepUtils
import dev.puzzleshq.buildsrc.GenericTransformer
import me.lucko.jarrelocator.JarRelocator
import me.lucko.jarrelocator.Relocation
import org.hjson.JsonArray
import org.hjson.JsonObject

import static org.gradle.api.artifacts.transform.TransformParameters.None

plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.sgtsilvio.gradle.maven-central-publishing") version "0.4.0"
    id 'com.gradleup.shadow' version '8.3.6'
}

var manipulator = file("$projectDir/src/common/resources/puzzle-loader-core.manipulator")

def ref = System.getenv("GITHUB_REF")
version = ((ref == null) ? "refs/tags/0.0.0-alpha" : ref).replaceAll("refs/tags/", "")

String mavenUrl = System.getenv("MAVEN_URL")

String envRepo = System.getenv("MAVEN_REPO")
String mavenRepo = envRepo != null ? envRepo : "releases"

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = '8'
    targetCompatibility = '8'
}

sourceSets {
    common
    client
    server
}

configurations {

    allCompileOnly
    clientCompilyOnly.extendsFrom(allCompileOnly)
    commonCompilyOnly.extendsFrom(allCompileOnly)

    clientBundle
    clientImplementation.extendsFrom(clientBundle)

    clientInternal
    clientImplementation.extendsFrom(clientInternal)

    serverInternal
    serverImplementation.extendsFrom(serverInternal)

    commonBundle
    commonImplementation.extendsFrom(commonBundle)
    clientImplementation.extendsFrom(commonBundle)

    serverBundle
    commonImplementation.extendsFrom(serverBundle)
    serverImplementation.extendsFrom(serverBundle)

    clientNative
    clientImplementation.extendsFrom(clientNative)

    clientImpl
    clientImplementation.extendsFrom(clientImpl)

    serverImpl
    serverImplementation.extendsFrom(serverImpl)
}

def natives(String lwjgl_natives) {
    dependencies {
        clientNative "org.lwjgl:lwjgl:$lwjgl_version:$lwjgl_natives"
        clientNative "org.lwjgl:lwjgl-opengl:$lwjgl_version:$lwjgl_natives"
        clientNative "org.lwjgl:lwjgl-glfw:$lwjgl_version:$lwjgl_natives"
    }
}

FileInputStream stream = new FileInputStream(manipulator)
byte[] bytes = stream.readAllBytes()
stream.close()
String str = new String(bytes)

AccessWriters.init(null)
AccessWriters.MERGED.add(AccessWriters.getFormat("manipulator").parse(str))

abstract class MyTransform implements TransformAction<None> {

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact();

    @SuppressWarnings("unused")
    void transform(TransformOutputs outputs) {
        var inp = inputArtifact.get().asFile
        var out = outputs.file(inp.name.replace(".jar", "-transformed.jar"))

        List<Relocation> rules = new ArrayList<>()
//        rules.add(new Relocation("org.objectweb", "bundled.org.objectweb"))
//        rules.add(new Relocation("org.spongepowered.include", "bundled"))

        JarRelocator relocator = new JarRelocator(inp, out, rules);
        relocator.run();

        GenericTransformer.transform(out)
    }
}

Attribute<Boolean> manipulated = Attribute.of("manipulated", Boolean.class)

afterEvaluate {
    project.getDependencies().getAttributesSchema().attribute(manipulated);
    project.getDependencies().getArtifactTypes().named("jar", artifact -> {
        artifact.getAttributes().attribute(manipulated, false)
    })

    project.getDependencies().registerTransform(MyTransform) {
        getFrom().attribute(manipulated, false)
        getTo().attribute(manipulated, true)
    }

    project.getConfigurations().configureEach(config -> {
        if (config.isCanBeResolved())
            config.getAttributes().attribute(manipulated, true)
    })
}

// Common Dependencies
dependencies {
    clientCompileOnly 'org.jetbrains:annotations:24.0.0'
    commonCompileOnly 'org.jetbrains:annotations:24.0.0'
    serverCompileOnly 'org.jetbrains:annotations:24.0.0'

    clientImpl "org.lwjgl:lwjgl:$lwjgl_version"
    clientImpl "org.lwjgl:lwjgl-opengl:$lwjgl_version"
    clientImpl "org.lwjgl:lwjgl-glfw:$lwjgl_version"

    natives("natives-linux")
    natives("natives-linux-arm32")
    natives("natives-linux-arm64")
    natives("natives-macos")
    natives("natives-macos-arm64")
    natives("natives-windows")
    natives("natives-windows-arm64")
    natives("natives-windows-x86")

    clientInternal sourceSets.common.output
    serverInternal sourceSets.common.output

    // Common
    commonImplementation 'org.jetbrains:annotations:24.0.0'
    commonImplementation 'io.sigpipe:jbsdiff:1.0'
    commonImplementation "org.apache.commons:commons-compress:1.28.0"

    commonBundle annotationProcessor("io.github.llamalad7:mixinextras-fabric:$mixin_extras_version")
    commonBundle("net.fabricmc:sponge-mixin:$mixin_version") {
        exclude group: "com.google.code.gson", module: "gson"
        exclude group: "com.google.guava", module: "guava"
    }
    commonBundle "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"
    commonBundle "com.google.guava:guava:$guava_version"
    commonBundle "org.javassist:javassist:3.30.2-GA"

    commonBundle "com.github.villadora:semver:0.0.3"

    commonBundle "org.apache.logging.log4j:log4j-api:$log4j_version"
    commonBundle "org.apache.logging.log4j:log4j-core:$log4j_version"
    commonBundle "org.reflections:reflections:$reflections_version"

    commonBundle "org.ow2.asm:asm:$asm_version"
    commonBundle "org.ow2.asm:asm-tree:$asm_version"
    commonBundle "org.ow2.asm:asm-util:$asm_version"
    commonBundle "org.ow2.asm:asm-analysis:$asm_version"
    commonBundle "org.ow2.asm:asm-commons:$asm_version"

    commonBundle "dev.puzzleshq:puzzle-annotations:1.0.0"
    commonBundle "dev.puzzleshq:access-writer:1.0.4+c"
    commonBundle "dev.puzzleshq:mod-format-framework:1.1.1"

    commonBundle "org.hjson:hjson:$hjson_version"
}

tasks.register("buildMergedTestJar", ShadowJar) {
    ArrayList t = new ArrayList();
    Collections.addAll(t, project.configurations.clientInternal, project.configurations.commonBundle, project.configurations.clientBundle)
    configurations = t

    mergeServiceFiles()
    relocate("org.objectweb", "internal.org.objectweb")
    relocate("org.spongepowered.include", "internal")
    relocate("com.google.common.eventbus", "unused")

    archiveClassifier = "merged-test"
    from sourceSets.client.output
}

tasks.register("buildServerJar", ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "server"
    from sourceSets.server.output
}

tasks.register("buildCommonJar", ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "common"
    from sourceSets.common.output
}

tasks.register("buildClientJar", ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "client"
    from sourceSets.client.output
}

tasks.register("buildSourcesJar", Jar) {
    from sourceSets.client.allSource
    from sourceSets.common.allSource
    from sourceSets.server.allSource
    archiveClassifier = "sources"
}

static def add(String side, JsonObject o, Configuration configuration, String type) {
    JsonArray array
    if (o.get(side) == null) array = new JsonArray()
    else array = o.get(side).asArray()

    for (final def dep in configuration.allDependencies) {
        JsonObject object = new JsonObject();

        def classifier = DepUtils.getClassifier(dep);
        if (classifier != null) object.add("classifier", classifier);
        object.add("groupId", dep.group);
        object.add("artifactId", dep.name);
        object.add("version", dep.version);
        if (dep.name == "puzzle-loader-core")
            object.add("type", "compileOnly");
        else
            object.add("type", type);
        array.add(object)
    }
    o.add(side, array)
}

tasks.register("mkDeps") {
    File file = new File("$projectDir/dependencies.json")

    JsonObject object = new JsonObject();
    add("client", object, configurations.clientImpl, "implementation")
    add("server", object, configurations.serverImpl, "implementation")
    add("common", object, configurations.commonBundle, "implementation")

    JsonArray repos = new JsonArray()
    for (i in 0..<project.repositories.size()) {
        def dependency = project.repositories[i];
        if (dependency instanceof MavenArtifactRepository) {
            if (dependency.name == "MavenLocal") continue
            JsonObject repo = new JsonObject()
            repo.add("name", dependency.name)
            repo.add("url", dependency.url.toString())
            repos.add(repo)
        }
    }
    object.add("repos", repos)

    file.write(object.toString(Stringify.FORMATTED))
}

processCommonResources {
    Map<String, Object> replacement_properties = [
            "version": ((String)version).contains(".") ? version : "0.0.0-alpha",
            "mixinVersion": mixin_version,
    ]

    inputs.properties replacement_properties

    filesMatching(["assets/puzzle-loader-core/core-version.txt", "assets/puzzle-loader-core/mixin-version.txt"]) {
        expand replacement_properties
    }
}

publishing {
    repositories {
        maven {
            name = "PuzzleHQsMaven"
            url = mavenUrl+ "/" +mavenRepo
            credentials {
                username = System.getenv("MAVEN_NAME")
                password = System.getenv("MAVEN_SECRET")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
        mavenLocal()
    }

    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id

            artifact source: buildClientJar, classifier: 'client', extension: 'jar'
            artifact source: buildCommonJar, classifier: 'common', extension: 'jar'
            artifact source: buildServerJar, classifier: 'server', extension: 'jar'
            artifact source: buildSourcesJar, classifier: 'sources', extension: 'jar'

            pom {
                name = p_name
                description = p_desc
                url = p_git

                dependencies {
                }

                licenses {
                    license {
                        name = "GNU Lesser General Public License"
                        url = "https://www.gnu.org/licenses/lgpl-3.0.html"
                        distribution = "LGPL"
                        comments = "This project includes LGPL-licensed components."
                    }
                }

                developers {
                    developer {
                        id = 'mrzombii'
                        name = 'Mr Zombii'
                        email = 'thezombiigames@gmail.com'
                    }
                }
                scm {
                    connection = "${p_git}.git"
                    developerConnection = "${p_git}.git"
                    url = "${p_git}.git"
                }
            }
        }
    }
}

if (ref != null) {
    signing {
        useGpgCmd()
        sign(publishing.publications[0])
    }
}

wrapper {
    gradleVersion = "8.14"
    distributionType = Wrapper.DistributionType.ALL
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of("8"))
